{"ast":null,"code":"// import React, { useState } from 'react';\n// import './App.css';\n// function App() {\n//   const [email, setEmail] = useState('');\n//   const [name, setName] = useState('');\n//   const [userStatus, setUserStatus] = useState('');\n//   const [error, setError] = useState('');\n//   const handleEmailSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       const response = await fetch('/mongodbsearch', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email }),\n//       });\n//       const data = await response.json();\n//       if (response.ok) {\n//         setUserStatus(data.status);\n//         if (data.status === 'found') {\n//           alert('Welcome back, ' + data.data.name);  // Optionally redirect or update UI\n//         }\n//       } else {\n//         throw new Error(data.error || 'Something went wrong');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n//   const handleNameSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       // Example: Post name to the server\n//       const response = await fetch('/submit-name', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email, name: name }),\n//       });\n//       const result = await response.json();\n//       if (response.ok) {\n//         alert('Name saved successfully!');  // Optionally redirect or update UI\n//       } else {\n//         throw new Error(result.error || 'Failed to save name');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n//   return (\n//     <div className=\"App\">\n//       <div className=\"App-header\">\n//         <form onSubmit={handleEmailSubmit}>\n//           <label htmlFor=\"email\">Enter your Email Address:</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\">Submit</button>\n//         </form>\n//         {userStatus === 'not_found' && (\n//           <form onSubmit={handleNameSubmit}>\n//             <label htmlFor=\"name\">Enter your Name:</label>\n//             <input\n//               type=\"text\"\n//               id=\"name\"\n//               value={name}\n//               onChange={(e) => setName(e.target.value)}\n//               required\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         )}\n//         {error && <div>Error: {error}</div>}\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\nimport React,{useState}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[email,setEmail]=useState('');const[name,setName]=useState('');const[stock,setStock]=useState('');const[company,setCompany]=useState('');const[userData,setUserData]=useState(null);const[searchHistory,setSearchHistory]=useState([]);const[userStatus,setUserStatus]=useState('');const[error,setError]=useState('');const handleEmailSubmit=async event=>{event.preventDefault();setError('');try{const response=await fetch('/mongodbsearch',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email})});const data=await response.json();if(response.ok){setUserStatus(data.status);setUserData(data.data);setName(data.data.name);if(data.status==='found'){setSearchHistory(data.data.searchHistory||[]);}}else{throw new Error(data.error||'Something went wrong');}}catch(err){setError(err.message);}};const handleNameSubmit=async event=>{event.preventDefault();try{// Assuming '/submit-name' endpoint accepts POST requests with email and name\nconst response=await fetch('/submit-name',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email,name:name})});if(!response.ok)throw new Error('Failed to save name');setUserStatus('name_submitted');}catch(err){setError(err.message);}};const handleStockSubmit=async event=>{event.preventDefault();try{// Example: Post stock and company information to the server\nconst response=await fetch('/submit-stock',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email,stock:stock,company:company})});if(!response.ok)throw new Error('Failed to submit stock information');alert('Stock information submitted successfully!');}catch(err){setError(err.message);}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"App-header\",children:[!userStatus&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleEmailSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Enter your Email Address:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",value:email,onChange:e=>setEmail(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),userStatus==='not_found'&&!name&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleNameSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Enter your Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"name\",value:name,onChange:e=>setName(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),(userStatus==='found'||userStatus==='name_submitted')&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Welcome \",userStatus==='found'?'back':'',\", \",name,\"!\"]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleStockSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"stock\",children:\"Enter Stock Symbol:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"stock\",value:stock,onChange:e=>setStock(e.target.value),required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"company\",children:\"Enter Company Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"company\",value:company,onChange:e=>setCompany(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),searchHistory.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Search History:\"}),searchHistory.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[item.date,\" - \",item.company]},index))]})]}),error&&/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error]})]})});}export default App;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","email","setEmail","name","setName","stock","setStock","company","setCompany","userData","setUserData","searchHistory","setSearchHistory","userStatus","setUserStatus","error","setError","handleEmailSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","status","Error","err","message","handleNameSubmit","handleStockSubmit","alert","className","children","onSubmit","htmlFor","type","id","value","onChange","e","target","required","length","map","item","index","date"],"sources":["C:/Users/gsaiu/Downloads/DS-Projects/Stock-Market-Prediction-Sentiment-Analysis/my-react-app/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [email, setEmail] = useState('');\n//   const [name, setName] = useState('');\n//   const [userStatus, setUserStatus] = useState('');\n//   const [error, setError] = useState('');\n\n//   const handleEmailSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       const response = await fetch('/mongodbsearch', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email }),\n//       });\n//       const data = await response.json();\n//       if (response.ok) {\n//         setUserStatus(data.status);\n//         if (data.status === 'found') {\n//           alert('Welcome back, ' + data.data.name);  // Optionally redirect or update UI\n//         }\n//       } else {\n//         throw new Error(data.error || 'Something went wrong');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n\n//   const handleNameSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       // Example: Post name to the server\n//       const response = await fetch('/submit-name', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email, name: name }),\n//       });\n//       const result = await response.json();\n//       if (response.ok) {\n//         alert('Name saved successfully!');  // Optionally redirect or update UI\n//       } else {\n//         throw new Error(result.error || 'Failed to save name');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"App-header\">\n//         <form onSubmit={handleEmailSubmit}>\n//           <label htmlFor=\"email\">Enter your Email Address:</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\">Submit</button>\n//         </form>\n\n//         {userStatus === 'not_found' && (\n//           <form onSubmit={handleNameSubmit}>\n//             <label htmlFor=\"name\">Enter your Name:</label>\n//             <input\n//               type=\"text\"\n//               id=\"name\"\n//               value={name}\n//               onChange={(e) => setName(e.target.value)}\n//               required\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         )}\n\n//         {error && <div>Error: {error}</div>}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [stock, setStock] = useState('');\n  const [company, setCompany] = useState('');\n  const [userData, setUserData] = useState(null);\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [userStatus, setUserStatus] = useState('');\n  const [error, setError] = useState('');\n\n  const handleEmailSubmit = async (event) => {\n    event.preventDefault();\n    setError('');\n    try {\n      const response = await fetch('/mongodbsearch', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ email: email }),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUserStatus(data.status);\n        setUserData(data.data);\n        setName(data.data.name);\n        if (data.status === 'found') {\n          setSearchHistory(data.data.searchHistory || []);\n        }\n      } else {\n        throw new Error(data.error || 'Something went wrong');\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleNameSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      // Assuming '/submit-name' endpoint accepts POST requests with email and name\n      const response = await fetch('/submit-name', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ email: email, name: name }),\n      });\n      if (!response.ok) throw new Error('Failed to save name');\n      setUserStatus('name_submitted');\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleStockSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      // Example: Post stock and company information to the server\n      const response = await fetch('/submit-stock', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ email: email, stock: stock, company: company }),\n      });\n      if (!response.ok) throw new Error('Failed to submit stock information');\n      alert('Stock information submitted successfully!');\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        {!userStatus && (\n          <form onSubmit={handleEmailSubmit}>\n            <label htmlFor=\"email\">Enter your Email Address:</label>\n            <input type=\"email\" id=\"email\" value={email} onChange={e => setEmail(e.target.value)} required />\n            <button type=\"submit\">Submit</button>\n          </form>\n        )}\n\n        {userStatus === 'not_found' && !name && (\n          <form onSubmit={handleNameSubmit}>\n            <label htmlFor=\"name\">Enter your Name:</label>\n            <input type=\"text\" id=\"name\" value={name} onChange={e => setName(e.target.value)} required />\n            <button type=\"submit\">Submit</button>\n          </form>\n        )}\n\n        {(userStatus === 'found' || userStatus === 'name_submitted') && (\n          <>\n            <div>Welcome {userStatus === 'found' ? 'back' : ''}, {name}!</div>\n            <form onSubmit={handleStockSubmit}>\n              <label htmlFor=\"stock\">Enter Stock Symbol:</label>\n              <input type=\"text\" id=\"stock\" value={stock} onChange={e => setStock(e.target.value)} required />\n              <label htmlFor=\"company\">Enter Company Name:</label>\n              <input type=\"text\" id=\"company\" value={company} onChange={e => setCompany(e.target.value)} required />\n              <button type=\"submit\">Submit</button>\n            </form>\n\n            {searchHistory.length > 0 && (\n              <div>\n                <h3>Search History:</h3>\n                {searchHistory.map((item, index) => (\n                  <div key={index}>{item.date} - {item.company}</div>\n                ))}\n              </div>\n            )}\n          </>\n        )}\n\n        {error && <div>Error: {error}</div>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
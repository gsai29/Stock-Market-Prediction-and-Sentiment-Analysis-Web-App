{"ast":null,"code":"// import React, { useState } from 'react';\n// import './App.css';\n// function App() {\n//   const [email, setEmail] = useState('');\n//   const [name, setName] = useState('');\n//   const [userStatus, setUserStatus] = useState('');\n//   const [error, setError] = useState('');\n//   const handleEmailSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       const response = await fetch('/mongodbsearch', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email }),\n//       });\n//       const data = await response.json();\n//       if (response.ok) {\n//         setUserStatus(data.status);\n//         if (data.status === 'found') {\n//           alert('Welcome back, ' + data.data.name);  // Optionally redirect or update UI\n//         }\n//       } else {\n//         throw new Error(data.error || 'Something went wrong');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n//   const handleNameSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       // Example: Post name to the server\n//       const response = await fetch('/submit-name', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email, name: name }),\n//       });\n//       const result = await response.json();\n//       if (response.ok) {\n//         alert('Name saved successfully!');  // Optionally redirect or update UI\n//       } else {\n//         throw new Error(result.error || 'Failed to save name');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n//   return (\n//     <div className=\"App\">\n//       <div className=\"App-header\">\n//         <form onSubmit={handleEmailSubmit}>\n//           <label htmlFor=\"email\">Enter your Email Address:</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\">Submit</button>\n//         </form>\n//         {userStatus === 'not_found' && (\n//           <form onSubmit={handleNameSubmit}>\n//             <label htmlFor=\"name\">Enter your Name:</label>\n//             <input\n//               type=\"text\"\n//               id=\"name\"\n//               value={name}\n//               onChange={(e) => setName(e.target.value)}\n//               required\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         )}\n//         {error && <div>Error: {error}</div>}\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\nimport Dashboard from'./Dashboard';import React,{useState}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[email,setEmail]=useState('');const[name,setName]=useState('');const[stock,setStock]=useState('');const[company,setCompany]=useState('');const[userData,setUserData]=useState(null);// Adjusted for better null checking\nconst[userStatus,setUserStatus]=useState('');const[searchHistory,setSearchHistory]=useState([]);const[error,setError]=useState('');const[analysisResults,setAnalysisResults]=useState(null);const handleEmailSubmit=async event=>{event.preventDefault();setError('');try{const response=await fetch('/mongodb_search_email',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email})});const data=await response.json();if(response.ok){setUserStatus(data.status);if(data.data){// Added check for data existence\nsetName(data.data.name);setSearchHistory(data.data.history||[]);setUserData(data.data);}}else{throw new Error(data.error||'Something went wrong');}}catch(err){setError(err.message);}};const handleNameSubmit=async event=>{event.preventDefault();if(name.trim()){// Ensure name is not just whitespace\nsetUserStatus('name_submitted');}};const handleStockSubmit=async event=>{event.preventDefault();const dateTime=new Date().toISOString();let endpoint,payload;if(userStatus==='found'&&userData){endpoint='/mongodb_update';payload={id:userData._id.$oid,company:company,dateTime:dateTime};}else{endpoint='/mongodb_create';payload={email:email,name:name,company:company,dateTime:dateTime};}try{const response=await fetch(endpoint,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});if(response.ok){console.log('Submission successful for update/create');// Proceed to call insertintotable after successful update/create\nawait submitToInsertIntoTable(stock,company);}else{const result=await response.json();throw new Error(result.error||'Failed to update/create user details');}}catch(err){console.error('Error:',err);setError(err.message);}};// Function to call insertintotable API\n// const submitToInsertIntoTable = async (stock, company) => {\n//   try {\n//     const response = await fetch('/insertintotable', {\n//       method: 'POST',\n//       headers: {'Content-Type': 'application/json'},\n//       body: JSON.stringify({ nm: stock, company: company }),\n//     });\n//     const data = await response.json();\n//     if (response.ok) {\n//       console.log('Data from insertintotable:', data);\n//     } else {\n//       throw new Error(data.error || 'Failed to fetch analysis results');\n//     }\n//   } catch (err) {\n//     console.error('Error fetching results:', err);\n//     setError(err.message);\n//   }\n// };\nconst submitToInsertIntoTable=async(stock,company)=>{try{const response=await fetch('/insertintotable',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({nm:stock,company:company})});const data=await response.json();if(response.ok){setAnalysisResults(data);// Set the data\nconsole.log('Data from insertintotable:',data);}else{throw new Error(data.error||'Failed to fetch analysis results');}}catch(err){console.error('Error fetching results:',err);setError(err.message);}};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:analysisResults?/*#__PURE__*/_jsx(Dashboard,{data:analysisResults}):/*#__PURE__*/_jsxs(\"div\",{className:\"App-header\",children:[userStatus===''&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleEmailSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Enter your Email Address:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",value:email,onChange:e=>setEmail(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),userStatus==='not_found'&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleNameSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Enter your Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"name\",value:name,onChange:e=>setName(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),(userStatus==='found'||userStatus==='name_submitted')&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Welcome \",userStatus==='found'?'Back':'',\", \",name,\"!\"]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleStockSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"stock\",children:\"Enter Stock Symbol:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"stock\",value:stock,onChange:e=>setStock(e.target.value),required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"company\",children:\"Enter Company Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"company\",value:company,onChange:e=>setCompany(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-history\",children:searchHistory.length>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Quick History\"}),searchHistory.map((item,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[item.date,\" - \",item.company]},index))]})})]}),error&&/*#__PURE__*/_jsxs(\"div\",{children:[\"Error: \",error]})]})});}export default App;","map":{"version":3,"names":["Dashboard","React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","email","setEmail","name","setName","stock","setStock","company","setCompany","userData","setUserData","userStatus","setUserStatus","searchHistory","setSearchHistory","error","setError","analysisResults","setAnalysisResults","handleEmailSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","status","history","Error","err","message","handleNameSubmit","trim","handleStockSubmit","dateTime","Date","toISOString","endpoint","payload","id","_id","$oid","console","log","submitToInsertIntoTable","result","nm","className","children","onSubmit","htmlFor","type","value","onChange","e","target","required","length","map","item","index","date"],"sources":["C:/Users/gsaiu/Downloads/DS-Projects/Stock-Market-Prediction-Sentiment-Analysis/my-react-app/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [email, setEmail] = useState('');\n//   const [name, setName] = useState('');\n//   const [userStatus, setUserStatus] = useState('');\n//   const [error, setError] = useState('');\n\n//   const handleEmailSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       const response = await fetch('/mongodbsearch', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email }),\n//       });\n//       const data = await response.json();\n//       if (response.ok) {\n//         setUserStatus(data.status);\n//         if (data.status === 'found') {\n//           alert('Welcome back, ' + data.data.name);  // Optionally redirect or update UI\n//         }\n//       } else {\n//         throw new Error(data.error || 'Something went wrong');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n\n//   const handleNameSubmit = async (event) => {\n//     event.preventDefault();\n//     setError('');\n//     try {\n//       // Example: Post name to the server\n//       const response = await fetch('/submit-name', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ email: email, name: name }),\n//       });\n//       const result = await response.json();\n//       if (response.ok) {\n//         alert('Name saved successfully!');  // Optionally redirect or update UI\n//       } else {\n//         throw new Error(result.error || 'Failed to save name');\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//       console.error('Error:', err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"App-header\">\n//         <form onSubmit={handleEmailSubmit}>\n//           <label htmlFor=\"email\">Enter your Email Address:</label>\n//           <input\n//             type=\"email\"\n//             id=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//           />\n//           <button type=\"submit\">Submit</button>\n//         </form>\n\n//         {userStatus === 'not_found' && (\n//           <form onSubmit={handleNameSubmit}>\n//             <label htmlFor=\"name\">Enter your Name:</label>\n//             <input\n//               type=\"text\"\n//               id=\"name\"\n//               value={name}\n//               onChange={(e) => setName(e.target.value)}\n//               required\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         )}\n\n//         {error && <div>Error: {error}</div>}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport Dashboard from './Dashboard';\n\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [stock, setStock] = useState('');\n  const [company, setCompany] = useState('');\n  const [userData, setUserData] = useState(null);  // Adjusted for better null checking\n  const [userStatus, setUserStatus] = useState('');\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [error, setError] = useState('');\n  const [analysisResults, setAnalysisResults] = useState(null);\n\n  const handleEmailSubmit = async (event) => {\n    event.preventDefault();\n    setError('');\n    try {\n      const response = await fetch('/mongodb_search_email', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ email: email }),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUserStatus(data.status);\n        if (data.data) { // Added check for data existence\n          setName(data.data.name);\n          setSearchHistory(data.data.history || []);\n          setUserData(data.data);\n        }\n      } else {\n        throw new Error(data.error || 'Something went wrong');\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const handleNameSubmit = async (event) => {\n    event.preventDefault();\n    if (name.trim()) { // Ensure name is not just whitespace\n      setUserStatus('name_submitted');\n    }\n  };\n\n\n  const handleStockSubmit = async (event) => {\n    event.preventDefault();\n    const dateTime = new Date().toISOString();\n  \n    let endpoint, payload;\n    if (userStatus === 'found' && userData) {\n      endpoint = '/mongodb_update';\n      payload = {\n        id: userData._id.$oid,\n        company: company,\n        dateTime: dateTime\n      };\n\n    } else {\n      endpoint = '/mongodb_create';\n      payload = {\n        email: email,\n        name: name,\n        company: company,\n        dateTime: dateTime\n      };\n    }\n  \n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(payload),\n      });\n      if (response.ok) {\n        console.log('Submission successful for update/create');\n        // Proceed to call insertintotable after successful update/create\n        await submitToInsertIntoTable(stock, company);\n      } else {\n        const result = await response.json();\n        throw new Error(result.error || 'Failed to update/create user details');\n      }\n    } catch (err) {\n      console.error('Error:', err);\n      setError(err.message);\n    }\n  };\n  \n  // Function to call insertintotable API\n  // const submitToInsertIntoTable = async (stock, company) => {\n  //   try {\n  //     const response = await fetch('/insertintotable', {\n  //       method: 'POST',\n  //       headers: {'Content-Type': 'application/json'},\n  //       body: JSON.stringify({ nm: stock, company: company }),\n  //     });\n  //     const data = await response.json();\n  //     if (response.ok) {\n  //       console.log('Data from insertintotable:', data);\n  //     } else {\n  //       throw new Error(data.error || 'Failed to fetch analysis results');\n  //     }\n  //   } catch (err) {\n  //     console.error('Error fetching results:', err);\n  //     setError(err.message);\n  //   }\n  // };\n\n  const submitToInsertIntoTable = async (stock, company) => {\n    try {\n      const response = await fetch('/insertintotable', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({ nm: stock, company: company }),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setAnalysisResults(data);  // Set the data\n        console.log('Data from insertintotable:', data);\n      } else {\n        throw new Error(data.error || 'Failed to fetch analysis results');\n      }\n    } catch (err) {\n      console.error('Error fetching results:', err);\n      setError(err.message);\n    }\n  };\n  \n  \n\n\n\n  return (\n    <div className=\"App\">\n      {analysisResults ? (\n        <Dashboard data={analysisResults} />\n      ) : (\n        <div className=\"App-header\">\n          {userStatus === '' && (\n            <form onSubmit={handleEmailSubmit}>\n              <label htmlFor=\"email\">Enter your Email Address:</label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n              <button type=\"submit\">Submit</button>\n            </form>\n          )}\n  \n          {userStatus === 'not_found' && (\n            <form onSubmit={handleNameSubmit}>\n              <label htmlFor=\"name\">Enter your Name:</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n              <button type=\"submit\">Submit</button>\n            </form>\n          )}\n  \n          {(userStatus === 'found' || userStatus === 'name_submitted') && (\n            <>\n              <h2>Welcome {userStatus === 'found' ? 'Back' : ''}, {name}!</h2>\n              <form onSubmit={handleStockSubmit}>\n                <label htmlFor=\"stock\">Enter Stock Symbol:</label>\n                <input\n                  type=\"text\"\n                  id=\"stock\"\n                  value={stock}\n                  onChange={(e) => setStock(e.target.value)}\n                  required\n                />\n                <label htmlFor=\"company\">Enter Company Name:</label>\n                <input\n                  type=\"text\"\n                  id=\"company\"\n                  value={company}\n                  onChange={(e) => setCompany(e.target.value)}\n                  required\n                />\n                <button type=\"submit\">Submit</button>\n              </form>\n              <div className=\"search-history\">\n                {searchHistory.length > 0 && (\n                  <>\n                    <h3>Quick History</h3>\n                    {searchHistory.map((item, index) => (\n                      <div key={index}>{item.date} - {item.company}</div>\n                    ))}\n                  </>\n                )}\n              </div>\n            </>\n          )}\n  \n          {error && <div>Error: {error}</div>}\n        </div>\n      )}\n    </div>\n  );\n  \n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}